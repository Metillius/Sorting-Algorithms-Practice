public class Main {

    //int i ;
    int[] Arr = {15,23,4,67,2,89,42,54};


    public static void main(String[] args) {
        Main mainny = new Main();




        //++++++++++++++HEAPSORT+++++++++++++++++++++
        /*Maxheap heap = new Maxheap(10);

        heap.insert(15);
        heap.insert(23);
        heap.insert(4);
        heap.insert(67);
        heap.insert(2);
        heap.insert(89);
        heap.insert(42);
        heap.insert(54);

        heap.printHeap();

        heap.sort();
        heap.printHeap();*/

        //++++++++++++++HEAPSORT+++++++++++++++++++++



        //mainny.insertSort();
        //mainny.shellSort();
        //mainny.printSort();

        //mainny.printQUick();
        //mainny.printMerge();



    }



    //++++++++++++++QUICK+++++++++++++++++++++
    /*public void printQUick(){
        quicksort(Arr, 0, Arr.length - 1);
        for (int i = 0; i < Arr.length; i++) {
            System.out.println(Arr[i]);
        }
    }


    static void quicksort(int[] arr, int low, int high){
        if(low < high){
            int p = partition(arr, low, high);
            quicksort(arr, low, p-1);
            quicksort(arr, p+1, high);
        }
    }

    static int partition(int[] arr, int low, int high){
        int p = low, j;
        for(j=low+1; j <= high; j++)
            if(arr[j] < arr[low])
                swap(arr, ++p, j);

        swap(arr, low, p);
        return p;
    }

    static void swap(int[] arr, int low, int pivot){
        int tmp = arr[low];
        arr[low] = arr[pivot];
        arr[pivot] = tmp;
    }*/
    //++++++++++++++QUICK+++++++++++++++++++++






    //++++++++++++++MERGE+++++++++++++++++++++
    /*public void printMerge(){

        mergeSort(Arr, 0, Arr.length);

        for (int i = 0; i < Arr.length; i++) {
            System.out.println(Arr[i]);
        }
    }


    public static void mergeSort(int[] input, int start, int end) {

        if (end - start < 2) {
            return;
        }

        int mid = (start + end) / 2;
        mergeSort(input, start, mid);
        mergeSort(input, mid, end);
        merge(input, start, mid, end);
    }

    public static void merge(int[] input, int start, int mid, int end) {

        if (input[mid - 1] <= input[mid]) {
            return;
        }

        int i = start;
        int j = mid;
        int tempIndex = 0;

        int[] temp = new int[end - start];
        while (i < mid && j < end) {
            temp[tempIndex++] = input[i] <= input[j] ? input[i++] : input[j++];
        }

        System.arraycopy(input, i, input, start + tempIndex, mid - i);
        System.arraycopy(temp, 0, input, start, tempIndex);


    }*/
    //++++++++++++++MERGE+++++++++++++++++++++




   /* public void printSort(){

        for(int i = 0; i < Arr.length; i++){
            System.out.println(Arr[i]);
        }
    }*/



   /* public void shellSort(){

        for(int gap = Arr.length/2; gap > 0; gap /= 2) {

            for(int i = gap ; i < Arr.length; i++){

                int temp = Arr[i];

                int j = i;

                while(j >=gap && Arr[j-gap] > temp ){

                    Arr[j] = Arr[j-gap];
                    j -= gap;

                }

                Arr[j] = temp;

            }

        }
    }*/



   /* public void insertionSort(){

        for(int firstUnsorted = 1; firstUnsorted < Arr.length ; firstUnsorted++) {

            int temp = Arr[firstUnsorted];


            for (i = firstUnsorted; i > 0 && temp < Arr[i - 1]; i--) {

                Arr[i] = Arr[i - 1];
            }

            Arr[i] = temp;
        }
    }*/





}

